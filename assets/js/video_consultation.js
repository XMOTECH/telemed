// Module de consultation vid√©o avec WebRTC et Phoenix Channels
// Syst√®me de t√©l√©m√©decine - Consultation vid√©o en temps r√©el

export class VideoConsultation {
  constructor(roomId, userName) {
    this.roomId = roomId;
    this.userName = userName;
    this.socket = null;
    this.channel = null;
    this.localStream = null;
    this.screenStream = null;
    this.peerConnections = {};
    this.isInitiator = false;
    this.audioEnabled = true;
    this.videoEnabled = true;
    this.isScreenSharing = false;
    
    // Configuration ICE servers (STUN/TURN) - Am√©lior√©e pour ngrok
    this.configuration = {
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' },
        { urls: 'stun:stun2.l.google.com:19302' },
        { urls: 'stun:stun3.l.google.com:19302' },
        { urls: 'stun:stun4.l.google.com:19302' },
        { urls: 'stun:stun.ekiga.net' },
        { urls: 'stun:stun.ideasip.com' },
        { urls: 'stun:stun.schlund.de' },
        { urls: 'stun:stun.stunprotocol.org:3478' },
        { urls: 'stun:stun.voiparound.com' },
        { urls: 'stun:stun.voipbuster.com' },
        { urls: 'stun:stun.voipstunt.com' },
        { urls: 'stun:stun.counterpath.com' },
        { urls: 'stun:stun.1und1.de' }
      ],
      iceCandidatePoolSize: 10,
      iceTransportPolicy: 'all',
      bundlePolicy: 'max-bundle',
      rtcpMuxPolicy: 'require'
    };

    // Callbacks personnalisables
    this.onLocalStream = null;
    this.onRemoteStream = null;
    this.onRemoteStreamRemoved = null;
    this.onChatMessage = null;
    this.onUserJoined = null;
    this.onUserLeft = null;
    this.onStatusChange = null;
    this.onError = null;
  }

  // === CONNEXION ET INITIALISATION ===

  async connect() {
    try {
      this.updateStatus("Connexion au serveur...");
      
      // Cr√©er et connecter le socket Phoenix
      if (typeof Phoenix === 'undefined') {
        throw new Error("Phoenix n'est pas charg√©");
      }

      this.socket = new Phoenix.Socket("/socket", {
        params: { user_name: this.userName }
      });
      
      this.socket.connect();
      
      // Rejoindre le channel de la salle
      this.channel = this.socket.channel(`video:${this.roomId}`, {
        user_name: this.userName
      });

      // Configurer les listeners
      this.setupChannelListeners();

      // Rejoindre la salle
      const response = await new Promise((resolve, reject) => {
        this.channel.join()
          .receive("ok", resp => resolve(resp))
          .receive("error", resp => reject(resp));
      });

      this.userId = response.user_id;
      this.updateStatus(`Connect√© √† la salle ${this.roomId}`);
      
      console.log("Connexion √©tablie:", response);
      return response;
      
    } catch (error) {
      this.handleError("Erreur de connexion", error);
      throw error;
    }
  }

  setupChannelListeners() {
    // Nouvel utilisateur rejoint
    this.channel.on("user_joined", (payload) => {
      console.log("Utilisateur rejoint:", payload);
      this.updateStatus(`${payload.user_name} a rejoint la consultation`);
      
      if (this.onUserJoined) {
        this.onUserJoined(payload);
      }
      
      // Si on a d√©j√† un stream, cr√©er une connexion peer
      if (this.localStream) {
        this.createPeerConnection(payload.user_id);
      }
    });

    // Utilisateur quitte
    this.channel.on("user_left", (payload) => {
      console.log("Utilisateur parti:", payload);
      this.updateStatus(`${payload.user_name} a quitt√© la consultation`);
      
      if (this.onUserLeft) {
        this.onUserLeft(payload);
      }
      
      // Fermer la connexion peer
      this.closePeerConnection(payload.user_id);
    });

    // Offre WebRTC re√ßue
    this.channel.on("offer", async (payload) => {
      console.log("Offre re√ßue de:", payload.from_name);
      
      if (payload.to && payload.to !== this.userId) {
        return; // Pas pour nous
      }
      
      await this.handleOffer(payload);
    });

    // R√©ponse WebRTC re√ßue
    this.channel.on("answer", async (payload) => {
      console.log("R√©ponse re√ßue de:", payload.from_name);
      
      if (payload.to && payload.to !== this.userId) {
        return;
      }
      
      await this.handleAnswer(payload);
    });

    // Candidat ICE re√ßu
    this.channel.on("ice_candidate", async (payload) => {
      if (payload.to && payload.to !== this.userId) {
        return;
      }
      
      await this.handleIceCandidate(payload);
    });

    // Message de chat
    this.channel.on("chat_message", (payload) => {
      console.log("Message de chat:", payload);
      
      if (this.onChatMessage) {
        this.onChatMessage(payload);
      }
    });

    // Changements audio/vid√©o
    this.channel.on("user_audio_changed", (payload) => {
      console.log("Audio chang√©:", payload);
      // Mettre √† jour l'UI
    });

    this.channel.on("user_video_changed", (payload) => {
      console.log("Vid√©o chang√©e:", payload);
      // Mettre √† jour l'UI
    });

    // Partage d'√©cran
    this.channel.on("user_screen_share_started", (payload) => {
      console.log("Partage d'√©cran d√©marr√©:", payload);
      this.updateStatus(`${payload.user_name} partage son √©cran`);
    });

    this.channel.on("user_screen_share_stopped", (payload) => {
      console.log("Partage d'√©cran arr√™t√©:", payload);
    });
  }

  // === GESTION DU STREAM LOCAL ===

  async startLocalStream(videoConstraints = true, audioConstraints = true) {
    try {
      this.updateStatus("Activation de la cam√©ra et du microphone...");
      
      const constraints = {
        video: videoConstraints,
        audio: audioConstraints
      };

      this.localStream = await navigator.mediaDevices.getUserMedia(constraints);
      
      this.audioEnabled = audioConstraints !== false;
      this.videoEnabled = videoConstraints !== false;
      
      this.updateStatus("Cam√©ra et microphone activ√©s");
      
      if (this.onLocalStream) {
        this.onLocalStream(this.localStream);
      }
      
      return this.localStream;
      
    } catch (error) {
      this.handleError("Erreur d'acc√®s aux m√©dias", error);
      throw error;
    }
  }

  stopLocalStream() {
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
      this.localStream = null;
      this.updateStatus("Cam√©ra et microphone d√©sactiv√©s");
    }
  }

  // === GESTION WEBRTC ===

  createPeerConnection(remoteUserId) {
    console.log("Cr√©ation connexion peer pour:", remoteUserId);
    
    const pc = new RTCPeerConnection(this.configuration);
    this.peerConnections[remoteUserId] = pc;

    // Ajouter les tracks locaux
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => {
        pc.addTrack(track, this.localStream);
        console.log("Track ajout√©:", track.kind);
      });
    }

    // G√©rer les candidats ICE - Am√©lior√© pour ngrok
    pc.onicecandidate = (event) => {
      if (event.candidate) {
        console.log("‚úÖ Candidat ICE trouv√©:", event.candidate.type, event.candidate.protocol);
        this.channel.push("ice_candidate", {
          candidate: event.candidate,
          to: remoteUserId
        });
      } else {
        console.log("‚ùå Fin des candidats ICE");
      }
    };

    // Gestion des √©tats de connexion - Debug am√©lior√©
    pc.onconnectionstatechange = () => {
      console.log("üîÑ √âtat connexion:", pc.connectionState);
      if (pc.connectionState === 'connected') {
        console.log("‚úÖ CONNEXION √âTABLIE avec", remoteUserId);
      } else if (pc.connectionState === 'failed') {
        console.log("‚ùå √âCHEC CONNEXION avec", remoteUserId);
      }
    };

    pc.oniceconnectionstatechange = () => {
      console.log("üßä √âtat ICE:", pc.iceConnectionState);
    };

    // G√©rer le stream distant - Am√©lior√© pour ngrok
    pc.ontrack = (event) => {
      console.log("üé• Track distant re√ßu:", event.track.kind, "de", remoteUserId);
      
      if (event.streams && event.streams[0]) {
        console.log("‚úÖ Stream distant valid√©");
        if (this.onRemoteStream) {
          this.onRemoteStream(event.streams[0], remoteUserId);
        }
      } else {
        console.log("‚ö†Ô∏è Stream distant invalide");
      }
    };

    // Gestion des changements de connexion - Consolid√©e
    pc.onconnectionstatechange = () => {
      console.log("üîÑ √âtat connexion:", pc.connectionState);
      
      switch (pc.connectionState) {
        case 'connected':
          console.log("‚úÖ CONNEXION VID√âO √âTABLIE avec", remoteUserId);
          this.updateStatus("Connexion vid√©o √©tablie");
          break;
        case 'disconnected':
          console.log("‚ö†Ô∏è CONNEXION INTERROMPUE avec", remoteUserId);
          this.updateStatus("Connexion interrompue");
          break;
        case 'failed':
          console.log("‚ùå √âCHEC CONNEXION avec", remoteUserId);
          this.updateStatus("√âchec de la connexion");
          this.closePeerConnection(remoteUserId);
          break;
        case 'connecting':
          console.log("üîÑ CONNEXION EN COURS avec", remoteUserId);
          this.updateStatus("Connexion en cours...");
          break;
      }
    };

    // Cr√©er l'offre si on est l'initiateur
    this.createOffer(remoteUserId);
  }

  async createOffer(remoteUserId) {
    const pc = this.peerConnections[remoteUserId];
    
    if (!pc) {
      console.error("‚ùå Pas de peer connection pour:", remoteUserId);
      return;
    }

    try {
      console.log("üì§ Cr√©ation offre WebRTC pour:", remoteUserId);
      
      const offer = await pc.createOffer({
        offerToReceiveAudio: true,
        offerToReceiveVideo: true,
        voiceActivityDetection: true,
        iceRestart: false
      });
      
      await pc.setLocalDescription(offer);
      console.log("‚úÖ Description locale d√©finie");
      
      console.log("üì§ Envoi offre √†:", remoteUserId);
      this.channel.push("offer", {
        offer: offer,
        to: remoteUserId
      });
      
    } catch (error) {
      console.error("‚ùå Erreur cr√©ation offre:", error);
      this.handleError("Erreur cr√©ation offre", error);
    }
  }

  async handleOffer(payload) {
    const { offer, from } = payload;
    
    console.log("üì• R√©ception offre de:", from);
    
    // Cr√©er une connexion peer si elle n'existe pas
    if (!this.peerConnections[from]) {
      this.createPeerConnection(from);
    }
    
    const pc = this.peerConnections[from];
    
    try {
      await pc.setRemoteDescription(new RTCSessionDescription(offer));
      console.log("‚úÖ Description distante d√©finie");
      
      const answer = await pc.createAnswer({
        voiceActivityDetection: true
      });
      await pc.setLocalDescription(answer);
      console.log("‚úÖ Description locale d√©finie");
      
      console.log("üì§ Envoi r√©ponse √†:", from);
      this.channel.push("answer", {
        answer: answer,
        to: from
      });
      
    } catch (error) {
      this.handleError("Erreur traitement offre", error);
    }
  }

  async handleAnswer(payload) {
    const { answer, from } = payload;
    const pc = this.peerConnections[from];
    
    if (!pc) {
      console.error("‚ùå Pas de peer connection pour:", from);
      return;
    }
    
    try {
      console.log("üì• R√©ception r√©ponse de:", from);
      await pc.setRemoteDescription(new RTCSessionDescription(answer));
      console.log("‚úÖ R√©ponse appliqu√©e de:", from);
      
    } catch (error) {
      console.error("‚ùå Erreur traitement r√©ponse:", error);
      this.handleError("Erreur traitement r√©ponse", error);
    }
  }

  async handleIceCandidate(payload) {
    const { candidate, from } = payload;
    const pc = this.peerConnections[from];
    
    if (!pc) {
      console.error("‚ùå Pas de peer connection pour:", from);
      return;
    }
    
    try {
      console.log("üßä Ajout candidat ICE de:", from, candidate.type);
      await pc.addIceCandidate(new RTCIceCandidate(candidate));
      console.log("Candidat ICE ajout√© de:", from);
      
    } catch (error) {
      this.handleError("Erreur ajout candidat ICE", error);
    }
  }

  closePeerConnection(remoteUserId) {
    const pc = this.peerConnections[remoteUserId];
    
    if (pc) {
      pc.close();
      delete this.peerConnections[remoteUserId];
      
      if (this.onRemoteStreamRemoved) {
        this.onRemoteStreamRemoved(remoteUserId);
      }
    }
  }

  // === CONTR√îLES AUDIO/VID√âO ===

  toggleAudio() {
    if (!this.localStream) return false;
    
    this.audioEnabled = !this.audioEnabled;
    
    this.localStream.getAudioTracks().forEach(track => {
      track.enabled = this.audioEnabled;
    });
    
    this.channel.push("toggle_audio", { enabled: this.audioEnabled });
    this.updateStatus(this.audioEnabled ? "Micro activ√©" : "Micro d√©sactiv√©");
    
    return this.audioEnabled;
  }

  toggleVideo() {
    if (!this.localStream) return false;
    
    this.videoEnabled = !this.videoEnabled;
    
    this.localStream.getVideoTracks().forEach(track => {
      track.enabled = this.videoEnabled;
    });
    
    this.channel.push("toggle_video", { enabled: this.videoEnabled });
    this.updateStatus(this.videoEnabled ? "Cam√©ra activ√©e" : "Cam√©ra d√©sactiv√©e");
    
    return this.videoEnabled;
  }

  // === PARTAGE D'√âCRAN ===

  async startScreenShare() {
    try {
      this.screenStream = await navigator.mediaDevices.getDisplayMedia({
        video: {
          cursor: "always"
        },
        audio: false
      });
      
      // Remplacer le track vid√©o dans toutes les connexions
      const videoTrack = this.screenStream.getVideoTracks()[0];
      
      Object.values(this.peerConnections).forEach(pc => {
        const sender = pc.getSenders().find(s => s.track && s.track.kind === 'video');
        if (sender) {
          sender.replaceTrack(videoTrack);
        }
      });
      
      // D√©tecter l'arr√™t du partage
      videoTrack.onended = () => {
        this.stopScreenShare();
      };
      
      this.isScreenSharing = true;
      this.channel.push("start_screen_share", {});
      this.updateStatus("Partage d'√©cran d√©marr√©");
      
      return this.screenStream;
      
    } catch (error) {
      this.handleError("Erreur partage d'√©cran", error);
      throw error;
    }
  }

  stopScreenShare() {
    if (this.screenStream) {
      this.screenStream.getTracks().forEach(track => track.stop());
      this.screenStream = null;
    }
    
    // Remettre le track vid√©o de la cam√©ra
    if (this.localStream) {
      const videoTrack = this.localStream.getVideoTracks()[0];
      
      Object.values(this.peerConnections).forEach(pc => {
        const sender = pc.getSenders().find(s => s.track && s.track.kind === 'video');
        if (sender && videoTrack) {
          sender.replaceTrack(videoTrack);
        }
      });
    }
    
    this.isScreenSharing = false;
    this.channel.push("stop_screen_share", {});
    this.updateStatus("Partage d'√©cran arr√™t√©");
  }

  // === CHAT ===

  sendChatMessage(message) {
    if (!message.trim()) return;
    
    this.channel.push("chat_message", { message: message });
  }

  // === UTILITAIRES ===

  updateStatus(message) {
    console.log("Status:", message);
    if (this.onStatusChange) {
      this.onStatusChange(message);
    }
  }

  handleError(context, error) {
    console.error(context, error);
    
    if (this.onError) {
      this.onError(context, error);
    }
  }

  // === D√âCONNEXION ===

  disconnect() {
    // Arr√™ter tous les streams
    this.stopLocalStream();
    this.stopScreenShare();
    
    // Fermer toutes les connexions peers
    Object.keys(this.peerConnections).forEach(userId => {
      this.closePeerConnection(userId);
    });
    
    // Quitter le channel
    if (this.channel) {
      this.channel.leave();
      this.channel = null;
    }
    
    // D√©connecter le socket
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }
    
    this.updateStatus("D√©connect√©");
  }

  // === V√âRIFICATIONS ===

  static checkWebRTCSupport() {
    const checks = {
      mediaDevices: !!navigator.mediaDevices,
      getUserMedia: !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia),
      RTCPeerConnection: !!(window.RTCPeerConnection),
      getDisplayMedia: !!(navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia)
    };
    
    checks.supported = checks.mediaDevices && checks.getUserMedia && checks.RTCPeerConnection;
    
    return checks;
  }
}

// Export par d√©faut
export default VideoConsultation;

