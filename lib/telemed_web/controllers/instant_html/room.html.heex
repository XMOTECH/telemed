<div id="consultation-app" class="h-screen bg-gradient-to-br from-blue-600 to-purple-700 flex items-center justify-center">
  
  <!-- ========== VÉRIFICATION ÉQUIPEMENT ========== -->
  <div id="equipment-check" class="text-center max-w-md w-full px-4">
    <div class="bg-white rounded-3xl p-8 md:p-12 shadow-2xl">
      <div class="text-6xl md:text-7xl mb-6 animate-pulse">🎥</div>
      
      <h1 class="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
        <%= if @user_role == "doctor" do %>
          Consultation Vidéo
        <% else %>
          Consultation avec votre médecin
        <% end %>
      </h1>
      
      <p class="text-gray-600 mb-8">
        Vérification de votre équipement...
      </p>
      
      <!-- Preview Caméra -->
      <div class="mb-6 rounded-2xl overflow-hidden bg-black shadow-inner">
        <video id="equipment-preview" autoplay muted playsinline class="w-full h-48 md:h-64 object-cover"></video>
      </div>
      
      <!-- Status Checks -->
      <div class="space-y-3 mb-8">
        <div id="camera-status" class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
          <span class="flex items-center text-gray-700">
            📹 Caméra
          </span>
          <span class="status-indicator">⏳</span>
        </div>
        
        <div id="microphone-status" class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
          <span class="flex items-center text-gray-700">
            🎤 Microphone
          </span>
          <span class="status-indicator">⏳</span>
        </div>
        
        <div id="network-status" class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
          <span class="flex items-center text-gray-700">
            📡 Connexion
          </span>
          <span class="status-indicator">⏳</span>
        </div>
      </div>
      
      <!-- GROS BOUTON DÉMARRER -->
      <button 
        id="start-button"
        class="w-full bg-gray-400 text-white text-xl font-bold py-6 rounded-2xl shadow-lg cursor-not-allowed"
        disabled
      >
        Vérification...
      </button>
      
      <p class="mt-4 text-sm text-gray-500">
        Connexion sécurisée et chiffrée 🔒
      </p>
    </div>
  </div>

  <!-- ========== CONSULTATION EN COURS ========== -->
  <div id="in-call" class="hidden w-full h-full relative">
    
    <!-- Vidéo Remote (Full Screen) -->
    <div id="remote-container" class="absolute inset-0 bg-black">
      <video id="remote-video" autoplay playsinline class="w-full h-full object-cover"></video>
      
      <!-- Placeholder -->
      <div id="waiting-remote" class="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-gray-800 to-gray-900">
        <div class="text-center">
          <div class="w-32 h-32 mx-auto mb-6 rounded-full bg-gray-700 flex items-center justify-center text-6xl">
            👤
          </div>
          <p class="text-white text-xl mb-2">En attente...</p>
          <p class="text-gray-400">
            <%= if @user_role == "doctor" do %>
              Attente du patient
            <% else %>
              Attente du médecin
            <% end %>
          </p>
        </div>
      </div>
      
      <!-- Nom participant -->
      <div id="remote-name" class="hidden absolute top-6 left-6 bg-black bg-opacity-60 backdrop-blur-sm px-4 py-2 rounded-full text-white text-sm font-medium">
        <span class="inline-block w-2 h-2 bg-green-500 rounded-full mr-2"></span>
        <span id="remote-name-text">Participant</span>
      </div>
    </div>

    <!-- Vidéo Locale (PIP) -->
    <div id="local-pip" class="absolute top-4 right-4 md:top-6 md:right-6 w-32 h-24 md:w-48 md:h-36 rounded-xl md:rounded-2xl overflow-hidden shadow-2xl border-2 border-white">
      <video id="local-video" autoplay muted playsinline class="w-full h-full object-cover"></video>
      <div class="absolute bottom-2 left-2 bg-black bg-opacity-60 backdrop-blur-sm px-2 py-1 rounded text-white text-xs">
        Vous
      </div>
    </div>

    <!-- Status Connexion -->
    <div id="connection-status" class="absolute top-4 left-4 md:top-6 md:left-6 px-4 py-2 bg-green-600 rounded-full text-white text-sm font-medium shadow-lg">
      <span class="inline-block w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></span>
      <span id="quality-text">Excellente</span>
    </div>

    <!-- Chronomètre -->
    <div class="absolute top-4 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-60 backdrop-blur-sm px-4 py-2 rounded-full text-white text-sm font-medium">
      ⏱️ <span id="timer">00:00</span>
    </div>

    <!-- Contrôles (Style WhatsApp) -->
    <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2">
      <div class="bg-gray-900 bg-opacity-90 backdrop-blur-xl rounded-full px-4 py-3 md:px-8 md:py-4 flex items-center space-x-3 md:space-x-6 shadow-2xl border border-gray-700">
        
        <!-- Micro -->
        <button id="toggle-mic" class="w-12 h-12 md:w-16 md:h-16 bg-gray-700 hover:bg-gray-600 rounded-full text-white transition-all transform hover:scale-110" title="Micro">
          🎤
        </button>

        <!-- Caméra -->
        <button id="toggle-cam" class="w-12 h-12 md:w-16 md:h-16 bg-gray-700 hover:bg-gray-600 rounded-full text-white transition-all transform hover:scale-110" title="Caméra">
          📹
        </button>

        <!-- Partage écran -->
        <button id="share-screen" class="hidden md:flex w-12 h-12 md:w-16 md:h-16 bg-gray-700 hover:bg-gray-600 rounded-full text-white transition-all transform hover:scale-110 items-center justify-center" title="Partager écran">
          🖥️
        </button>

        <!-- Terminer -->
        <button id="end-call" class="w-14 h-14 md:w-20 md:h-20 bg-red-600 hover:bg-red-500 rounded-full text-white transition-all transform hover:scale-110 shadow-xl text-2xl" title="Terminer">
          ☎️
        </button>

        <!-- Chat -->
        <button id="toggle-chat" class="w-12 h-12 md:w-16 md:h-16 bg-gray-700 hover:bg-gray-600 rounded-full text-white transition-all transform hover:scale-110 relative" title="Chat">
          💬
          <span id="unread-badge" class="hidden absolute -top-1 -right-1 bg-red-500 text-white text-xs w-5 h-5 rounded-full items-center justify-center"></span>
        </button>
      </div>
    </div>

    <!-- Chat Sidebar -->
    <div id="chat-sidebar" class="hidden absolute right-0 top-0 h-full w-full md:w-96 bg-white shadow-2xl flex flex-col z-50">
      <div class="p-4 border-b bg-gray-50 flex items-center justify-between">
        <h3 class="font-semibold text-gray-900">💬 Messages</h3>
        <button id="close-chat" class="p-2 hover:bg-gray-200 rounded-lg">✕</button>
      </div>

      <div id="messages-container" class="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50">
        <!-- Messages ajoutés dynamiquement -->
      </div>

      <div class="p-4 border-t bg-white">
        <form id="chat-form" class="flex items-end space-x-2">
          <input 
            id="message-input"
            type="text" 
            placeholder="Envoyer un message..."
            class="flex-1 px-4 py-3 border rounded-2xl focus:ring-2 focus:ring-blue-500"
            autocomplete="off"
          />
          <button type="submit" class="p-3 bg-blue-600 hover:bg-blue-500 rounded-full text-white transition-all shadow-lg">
            ➤
          </button>
        </form>
      </div>
    </div>

    <!-- Notification Toast -->
    <div id="notification-toast" class="hidden absolute top-20 left-1/2 transform -translate-x-1/2 bg-gray-900 bg-opacity-90 backdrop-blur-lg text-white px-6 py-3 rounded-full shadow-xl">
      <p id="notification-text"></p>
    </div>

  </div>

</div>

<script>
  // Configuration
  const ROOM_ID = '<%= @room_id %>';
  const USER_ID = '<%= @user_id %>';
  const USER_NAME = '<%= @user_name %>';

  let socket, channel, localStream, peerConnection;
  let isMicMuted = false, isCameraMuted = false, isScreenSharing = false;
  let timerInterval, startTime;
  let unreadMessages = 0;

  // ========== INIT ==========
  window.addEventListener('DOMContentLoaded', async () => {
    console.log('🚀 Initializing instant consultation');
    await checkEquipment();
  });

  // ========== VÉRIFICATION ÉQUIPEMENT ==========
  async function checkEquipment() {
    try {
      localStream = await navigator.mediaDevices.getUserMedia({
        video: { width: { ideal: 1280 }, height: { ideal: 720 } },
        audio: true
      });

      document.getElementById('equipment-preview').srcObject = localStream;

      updateStatus('camera-status', '✅ Caméra OK');
      updateStatus('microphone-status', '✅ Micro OK');
      updateStatus('network-status', '✅ Connexion OK');

      const btn = document.getElementById('start-button');
      btn.disabled = false;
      btn.className = 'w-full bg-green-600 hover:bg-green-500 text-white text-xl font-bold py-6 rounded-2xl shadow-lg transform hover:scale-105 transition-all';
      btn.innerHTML = '🚀 DÉMARRER LA CONSULTATION';
      btn.addEventListener('click', startConsultation);

    } catch (error) {
      console.error('Equipment error:', error);
      showNotification('❌ Erreur: Autorisez l\'accès à la caméra et au micro');
      updateStatus('camera-status', '❌ Permission refusée');
    }
  }

  function updateStatus(id, text) {
    const indicator = document.querySelector(`#${id} .status-indicator`);
    indicator.textContent = text.split(' ')[0];
    indicator.className = text.includes('✅') ? 'status-indicator text-green-600 font-bold' : 'status-indicator text-red-600';
  }

  // ========== DÉMARRAGE ==========
  async function startConsultation() {
    document.getElementById('equipment-check').classList.add('hidden');
    document.getElementById('in-call').classList.remove('hidden');
    
    document.getElementById('local-video').srcObject = localStream;
    
    startTimer();
    await connectWebSocket();
    await setupWebRTC();
  }

  // ========== WEBSOCKET ==========
  async function connectWebSocket() {
    socket = new Phoenix.Socket("/socket", { params: { user_id: USER_ID } });
    socket.connect();
    
    channel = socket.channel(`video:${ROOM_ID}`, { user_id: USER_ID, user_name: USER_NAME });
    
    channel.on("user_joined", (msg) => {
      console.log('👋 User joined:', msg);
      showNotification(`${msg.user_name} a rejoint`);
      document.getElementById('waiting-remote').classList.add('hidden');
      document.getElementById('remote-name').classList.remove('hidden');
      document.getElementById('remote-name-text').textContent = msg.user_name;
    });
    
    channel.on("user_left", (msg) => {
      showNotification(`${msg.user_name} a quitté`);
      document.getElementById('waiting-remote').classList.remove('hidden');
    });
    
    channel.on("offer", handleOffer);
    channel.on("answer", handleAnswer);
    channel.on("ice_candidate", handleIceCandidate);
    channel.on("chat_message", addChatMessage);
    
    await new Promise((resolve) => {
      channel.join().receive("ok", resolve);
    });
    
    showNotification('✅ Connecté');
  }

  // ========== WEBRTC ==========
  async function setupWebRTC() {
    peerConnection = new RTCPeerConnection({
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' }
      ]
    });

    localStream.getTracks().forEach(track => {
      peerConnection.addTrack(track, localStream);
    });

    peerConnection.ontrack = (event) => {
      document.getElementById('remote-video').srcObject = event.streams[0];
      document.getElementById('waiting-remote').classList.add('hidden');
    };

    peerConnection.onicecandidate = (event) => {
      if (event.candidate) {
        channel.push("ice_candidate", { candidate: event.candidate, to: 'other' });
      }
    };

    const offer = await peerConnection.createOffer({
      offerToReceiveAudio: true,
      offerToReceiveVideo: true
    });
    
    await peerConnection.setLocalDescription(offer);
    channel.push("offer", { offer: offer, to: 'other' });
  }

  async function handleOffer(payload) {
    await peerConnection.setRemoteDescription(payload.offer);
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    channel.push("answer", { answer: answer, to: payload.from });
  }

  async function handleAnswer(payload) {
    await peerConnection.setRemoteDescription(payload.answer);
  }

  async function handleIceCandidate(payload) {
    await peerConnection.addIceCandidate(payload.candidate);
  }

  // ========== CONTRÔLES ==========
  document.getElementById('toggle-mic')?.addEventListener('click', () => {
    isMicMuted = !isMicMuted;
    localStream.getAudioTracks().forEach(t => t.enabled = !isMicMuted);
    
    const btn = document.getElementById('toggle-mic');
    btn.className = isMicMuted ? 
      'w-12 h-12 md:w-16 md:h-16 bg-red-600 rounded-full text-white transition-all' :
      'w-12 h-12 md:w-16 md:h-16 bg-gray-700 hover:bg-gray-600 rounded-full text-white transition-all transform hover:scale-110';
    btn.textContent = isMicMuted ? '🔇' : '🎤';
    
    showNotification(isMicMuted ? '🔇 Micro coupé' : '🎤 Micro activé');
  });

  document.getElementById('toggle-cam')?.addEventListener('click', () => {
    isCameraMuted = !isCameraMuted;
    localStream.getVideoTracks().forEach(t => t.enabled = !isCameraMuted);
    
    const btn = document.getElementById('toggle-cam');
    btn.className = isCameraMuted ? 
      'w-12 h-12 md:w-16 md:h-16 bg-red-600 rounded-full text-white transition-all' :
      'w-12 h-12 md:w-16 md:h-16 bg-gray-700 hover:bg-gray-600 rounded-full text-white transition-all transform hover:scale-110';
    btn.textContent = isCameraMuted ? '📵' : '📹';
    
    document.getElementById('local-pip').style.display = isCameraMuted ? 'none' : 'block';
    showNotification(isCameraMuted ? '📵 Caméra éteinte' : '📹 Caméra allumée');
  });

  document.getElementById('end-call')?.addEventListener('click', () => {
    if (confirm('Terminer la consultation ?')) {
      cleanup();
      window.location.href = '/dashboard';
    }
  });

  document.getElementById('toggle-chat')?.addEventListener('click', () => {
    const sidebar = document.getElementById('chat-sidebar');
    sidebar.classList.toggle('hidden');
    unreadMessages = 0;
    document.getElementById('unread-badge').classList.add('hidden');
  });

  document.getElementById('close-chat')?.addEventListener('click', () => {
    document.getElementById('chat-sidebar').classList.add('hidden');
  });

  document.getElementById('chat-form')?.addEventListener('submit', (e) => {
    e.preventDefault();
    const input = document.getElementById('message-input');
    if (input.value.trim()) {
      channel.push("chat_message", { message: input.value });
      input.value = '';
    }
  });

  // ========== CHAT ==========
  function addChatMessage(payload) {
    const container = document.getElementById('messages-container');
    const isOwn = payload.from === USER_ID;
    
    const msgDiv = document.createElement('div');
    msgDiv.className = isOwn ? 'flex justify-end' : 'flex justify-start';
    
    msgDiv.innerHTML = `
      <div class="${isOwn ? 'bg-blue-600 text-white' : 'bg-white text-gray-900'} max-w-[75%] rounded-2xl px-4 py-2 shadow">
        <p class="text-sm font-medium mb-1">${payload.from_name}</p>
        <p>${payload.message}</p>
        <p class="text-xs opacity-70 mt-1">${new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })}</p>
      </div>
    `;
    
    container.appendChild(msgDiv);
    container.scrollTop = container.scrollHeight;
    
    if (!document.getElementById('chat-sidebar').classList.contains('hidden')) {
      unreadMessages = 0;
    } else {
      unreadMessages++;
      const badge = document.getElementById('unread-badge');
      badge.classList.remove('hidden');
      badge.classList.add('flex');
      badge.textContent = unreadMessages;
    }
  }

  // ========== TIMER ==========
  function startTimer() {
    startTime = Date.now();
    timerInterval = setInterval(() => {
      const elapsed = Math.floor((Date.now() - startTime) / 1000);
      const mins = Math.floor(elapsed / 60);
      const secs = elapsed % 60;
      document.getElementById('timer').textContent = 
        `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }, 1000);
  }

  // ========== NOTIFICATIONS ==========
  function showNotification(text) {
    const toast = document.getElementById('notification-toast');
    document.getElementById('notification-text').textContent = text;
    toast.classList.remove('hidden');
    setTimeout(() => toast.classList.add('hidden'), 3000);
  }

  // ========== CLEANUP ==========
  function cleanup() {
    if (timerInterval) clearInterval(timerInterval);
    if (localStream) localStream.getTracks().forEach(t => t.stop());
    if (peerConnection) peerConnection.close();
    if (channel) channel.leave();
    if (socket) socket.disconnect();
  }

  window.addEventListener('beforeunload', cleanup);
</script>
