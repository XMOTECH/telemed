<div class="camera-test">
  <h2>Test de Cam√©ra - Diagnostic WebRTC</h2>
  
  <div class="test-container">
    <video id="testVideo" autoplay playsinline muted></video>
    <p>Vid√©o de test</p>
  </div>
  
  <div class="controls">
    <button id="testCamera" type="button">Tester la Cam√©ra</button>
    <button id="stopTest" type="button" style="display:none;">Arr√™ter le Test</button>
  </div>
  
  <div id="testStatus" class="status">Pr√™t √† tester la cam√©ra</div>
  <div id="testDebug" class="debug"></div>
  
  <div class="info">
    <h3>Informations de diagnostic :</h3>
    <ul>
      <li><strong>Navigateur :</strong> <span id="browserInfo"></span></li>
      <li><strong>URL :</strong> <span id="urlInfo"></span></li>
      <li><strong>Protocole :</strong> <span id="protocolInfo"></span></li>
      <li><strong>mediaDevices :</strong> <span id="mediaDevicesInfo"></span></li>
      <li><strong>getUserMedia :</strong> <span id="getUserMediaInfo"></span></li>
      <li><strong>RTCPeerConnection :</strong> <span id="rtcInfo"></span></li>
    </ul>
  </div>
</div>

<script>
let testVideo = document.getElementById("testVideo");
let testCamera = document.getElementById("testCamera");
let stopTest = document.getElementById("stopTest");
let testStatus = document.getElementById("testStatus");
let testDebug = document.getElementById("testDebug");
let testStream = null;

function updateTestStatus(message) {
  testStatus.textContent = message;
  console.log(message);
}

function updateTestDebug(message) {
  testDebug.innerHTML += "<br>" + message;
}

function updateInfo(id, value) {
  const element = document.getElementById(id);
  if (element) {
    element.textContent = value;
  }
}

// Diagnostic au chargement
document.addEventListener('DOMContentLoaded', function() {
  updateTestDebug("=== DIAGNOSTIC WEBCAM ===");
  updateTestDebug("Chargement de la page...");
  
  // Informations de base
  updateInfo('browserInfo', navigator.userAgent);
  updateInfo('urlInfo', window.location.href);
  updateInfo('protocolInfo', window.location.protocol);
  
  // V√©rification des APIs WebRTC
  updateInfo('mediaDevicesInfo', navigator.mediaDevices ? "‚úÖ Disponible" : "‚ùå Non disponible");
  updateInfo('getUserMediaInfo', (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ? "‚úÖ Disponible" : "‚ùå Non disponible");
  updateInfo('rtcInfo', (window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection) ? "‚úÖ Disponible" : "‚ùå Non disponible");
  
  updateTestDebug("Navigateur: " + navigator.userAgent);
  updateTestDebug("URL: " + window.location.href);
  updateTestDebug("Protocole: " + window.location.protocol);
  updateTestDebug("mediaDevices: " + (navigator.mediaDevices ? "OK" : "NOK"));
  updateTestDebug("getUserMedia: " + ((navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ? "OK" : "NOK"));
  updateTestDebug("RTCPeerConnection: " + ((window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection) ? "OK" : "NOK"));
  
  // Avertissement HTTPS
  if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
    updateTestDebug("‚ö†Ô∏è ATTENTION: WebRTC peut n√©cessiter HTTPS sur certains navigateurs");
    updateTestDebug("Recommandation: Utilisez localhost:4001 au lieu de l'IP");
  }
});

testCamera.onclick = async () => {
  updateTestStatus("Test de la cam√©ra en cours...");
  updateTestDebug("=== D√âBUT DU TEST CAM√âRA ===");
  
  try {
    updateTestDebug("Demande d'acc√®s √† la cam√©ra...");
    
    testStream = await navigator.mediaDevices.getUserMedia({ 
      video: true, 
      audio: false
    });
    
    testVideo.srcObject = testStream;
    updateTestStatus("‚úÖ Cam√©ra activ√©e avec succ√®s !");
    updateTestDebug("‚úÖ Flux vid√©o obtenu avec succ√®s");
    updateTestDebug("Nombre de pistes: " + testStream.getTracks().length);
    
    testStream.getTracks().forEach((track, index) => {
      updateTestDebug(`Piste ${index}: ${track.kind} - ${track.label || 'Sans nom'}`);
    });
    
    testCamera.style.display = 'none';
    stopTest.style.display = 'inline-block';
    
  } catch (error) {
    updateTestStatus(`‚ùå Erreur: ${error.message}`);
    updateTestDebug(`‚ùå Erreur d√©taill√©e: ${error.name} - ${error.message}`);
    
    if (error.name === 'NotAllowedError') {
      updateTestDebug("üí° Solution: L'utilisateur a refus√© l'acc√®s √† la cam√©ra");
      updateTestDebug("   - Cliquez sur 'Autoriser' dans la popup du navigateur");
    } else if (error.name === 'NotFoundError') {
      updateTestDebug("üí° Solution: Aucune cam√©ra trouv√©e");
      updateTestDebug("   - V√©rifiez que votre cam√©ra est connect√©e et fonctionne");
    } else if (error.name === 'NotReadableError') {
      updateTestDebug("üí° Solution: La cam√©ra est utilis√©e par une autre application");
      updateTestDebug("   - Fermez les autres applications qui utilisent la cam√©ra");
    } else if (error.name === 'NotSupportedError') {
      updateTestDebug("üí° Solution: WebRTC non support√© sur cette page");
      updateTestDebug("   - Essayez d'acc√©der via localhost:4001 au lieu de l'IP");
    } else if (error.name === 'SecurityError') {
      updateTestDebug("üí° Solution: Erreur de s√©curit√©");
      updateTestDebug("   - V√©rifiez les permissions du navigateur");
    } else if (error.name === 'TypeError') {
      updateTestDebug("üí° Solution: getUserMedia non impl√©ment√©");
      updateTestDebug("   - Navigateur non compatible avec WebRTC");
    }
  }
};

stopTest.onclick = () => {
  if (testStream) {
    testStream.getTracks().forEach(track => track.stop());
    testVideo.srcObject = null;
    testStream = null;
    updateTestDebug("Flux vid√©o arr√™t√©");
  }
  
  updateTestStatus("Test arr√™t√©");
  testCamera.style.display = 'inline-block';
  stopTest.style.display = 'none';
};
</script>

<style>
.camera-test {
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
}

.test-container {
  text-align: center;
  margin: 20px 0;
}

#testVideo {
  width: 400px;
  height: 300px;
  background: #000;
  border: 1px solid #ccc;
  border-radius: 8px;
}

.controls {
  margin-top: 20px;
  text-align: center;
}

button {
  padding: 10px 20px;
  background: #007cba;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin: 0 5px;
}

button:hover:not(:disabled) {
  background: #005a87;
}

.status {
  margin-top: 15px;
  padding: 10px;
  background: #f0f0f0;
  border-radius: 4px;
  text-align: center;
  font-weight: bold;
}

.debug {
  margin-top: 10px;
  padding: 10px;
  background: #f8f8f8;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-family: monospace;
  font-size: 12px;
  max-height: 300px;
  overflow-y: auto;
  text-align: left;
}

.info {
  margin-top: 20px;
  padding: 15px;
  background: #e8f4fd;
  border: 1px solid #bee5eb;
  border-radius: 4px;
}

.info h3 {
  margin-top: 0;
  color: #0c5460;
}

.info ul {
  list-style: none;
  padding: 0;
}

.info li {
  margin: 5px 0;
  padding: 5px 0;
  border-bottom: 1px solid #d1ecf1;
}

.info li:last-child {
  border-bottom: none;
}
</style> 