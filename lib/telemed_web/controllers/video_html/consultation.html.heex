<div class="h-screen flex flex-col bg-white overflow-hidden">
  
  <!-- ==================== HEADER ==================== -->
  <header class="bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between flex-shrink-0 shadow-sm">
    <div class="flex items-center space-x-4">
      <!-- Logo -->
      <div class="flex items-center space-x-3">
        <div class="w-10 h-10 bg-gradient-to-br from-primary-500 to-primary-600 rounded-lg flex items-center justify-center shadow-md">
          <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
          </svg>
        </div>
        <div>
          <h1 class="text-xl font-bold text-gray-900">Consultation Vid√©o</h1>
          <p class="text-sm text-gray-500">Salle : <span id="roomIdDisplay" class="font-medium text-gray-700">En attente...</span></p>
        </div>
      </div>

      <!-- Statut connexion -->
      <div id="connectionStatus" class="hidden flex items-center space-x-2 px-3 py-1.5 bg-green-50 border border-green-200 rounded-full">
        <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
        <span class="text-green-700 text-sm font-medium">Connect√©</span>
      </div>
    </div>

    <div class="flex items-center space-x-4">
      <!-- User info -->
      <div class="flex items-center space-x-2 px-4 py-2 bg-gray-50 rounded-lg border border-gray-200">
        <div class="w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-bold">
          <span id="userInitial">?</span>
        </div>
        <span class="text-gray-900 text-sm font-medium" id="currentUserName">Participant</span>
      </div>

      <!-- Quitter -->
      <button 
        id="leaveButton"
        class="hidden px-5 py-2.5 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-all font-medium shadow-sm hover:shadow flex items-center space-x-2"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
        </svg>
        <span>Quitter</span>
      </button>
    </div>
  </header>

  <!-- ==================== CONTENU PRINCIPAL ==================== -->
  <div class="flex flex-1 overflow-hidden">
    
    <!-- ========== ZONE VID√âO PRINCIPALE ========== -->
    <main class="flex-1 bg-gray-50 relative flex flex-col p-6">
      
      <!-- Setup initial (avant connexion) -->
      <div id="setupControls" class="flex-1 flex items-center justify-center">
        <div class="max-w-md w-full bg-white rounded-2xl shadow-xl p-8 border border-gray-200">
          <div class="text-center mb-6">
            <div class="w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg class="w-8 h-8 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-900 mb-2">Rejoindre la consultation</h2>
            <p class="text-gray-600">Renseignez vos informations pour d√©marrer</p>
          </div>

          <div class="space-y-4">
            <div>
              <label class="block text-sm font-semibold text-gray-700 mb-2">Votre nom complet</label>
              <input 
                type="text" 
                id="userNameInput" 
                placeholder="Dr. Martin Dupont" 
                class="w-full px-4 py-3 bg-gray-50 text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all"
              />
            </div>
            
            <div>
              <label class="block text-sm font-semibold text-gray-700 mb-2">ID de la salle <span class="text-gray-400 font-normal">(optionnel)</span></label>
              <input 
                type="text" 
                id="roomIdInput" 
                placeholder="consultation-123" 
                class="w-full px-4 py-3 bg-gray-50 text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all"
              />
              <p class="text-xs text-gray-500 mt-1.5">üí° Laissez vide pour cr√©er une nouvelle salle</p>
            </div>

            <button 
              id="joinButton"
              class="w-full px-6 py-4 bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white rounded-lg font-semibold text-base transition-all shadow-lg hover:shadow-xl flex items-center justify-center space-x-2"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5" />
              </svg>
              <span>Rejoindre la consultation</span>
            </button>

            <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <p class="text-xs text-blue-800">
                <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
                <strong>Confidentialit√© :</strong> Consultation s√©curis√©e et crypt√©e de bout en bout.
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Interface consultation (apr√®s connexion) -->
      <div id="callInterface" class="hidden flex-1 flex flex-col">
        <!-- Zone vid√©o -->
        <div class="flex-1 relative rounded-xl overflow-hidden bg-gray-900 shadow-2xl">
          <!-- Vid√©o distante (principale) -->
          <video 
            id="remoteVideo" 
            autoplay 
            playsinline 
            class="w-full h-full object-cover"
          ></video>

          <!-- Placeholder vid√©o distante -->
          <div id="remoteVideo-placeholder" class="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-gray-800 to-gray-900">
            <div class="text-center">
              <div class="w-32 h-32 mx-auto rounded-full bg-gradient-to-br from-primary-500 to-primary-600 flex items-center justify-center text-white text-5xl font-bold mb-4 shadow-2xl">
                <svg class="w-20 h-20 text-white/70" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </div>
              <p class="text-white text-xl font-semibold mb-2">En attente du participant...</p>
              <p class="text-gray-400 text-sm">La vid√©o s'affichera d√®s que l'autre personne rejoindra</p>
            </div>
          </div>

          <!-- Nom du participant distant -->
          <div id="remoteUserOverlay" class="hidden absolute top-4 left-4 bg-black/60 backdrop-blur-sm px-4 py-2 rounded-lg">
            <p class="text-white font-semibold text-sm" id="remoteUserName">Participant</p>
          </div>

          <!-- Vid√©o locale (PiP) -->
          <div class="absolute bottom-6 right-6 w-64 aspect-video bg-gray-900 rounded-xl overflow-hidden shadow-2xl border-2 border-white">
            <video 
              id="localVideo" 
              autoplay 
              playsinline 
              muted 
              class="w-full h-full object-cover"
            ></video>

            <!-- Placeholder vid√©o locale -->
            <div id="localVideo-placeholder" class="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-gray-700 to-gray-800">
              <div class="text-center">
                <div class="w-16 h-16 mx-auto rounded-full bg-primary-600 flex items-center justify-center text-white text-2xl font-bold mb-2">
                  <span id="localUserInitial">?</span>
                </div>
                <p class="text-white text-sm font-medium">Vous</p>
              </div>
            </div>

            <!-- Nom local -->
            <div class="absolute bottom-2 left-2 bg-black/60 backdrop-blur-sm px-2 py-1 rounded">
              <p class="text-white text-xs font-semibold">Vous</p>
            </div>
          </div>

          <!-- Contr√¥les flottants (bas centre) -->
          <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2">
            <div class="flex items-center space-x-4 bg-white/95 backdrop-blur-md px-6 py-4 rounded-full shadow-2xl border border-gray-200">
              <!-- Toggle Audio -->
              <button 
                id="toggleAudioBtn"
                class="p-3 bg-primary-600 hover:bg-primary-700 text-white rounded-full transition-all shadow-lg hover:scale-110"
                title="Couper le micro"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd" />
                </svg>
              </button>

              <!-- Toggle Video -->
              <button 
                id="toggleVideoBtn"
                class="p-3 bg-primary-600 hover:bg-primary-700 text-white rounded-full transition-all shadow-lg hover:scale-110"
                title="Couper la cam√©ra"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z" />
                </svg>
              </button>

              <!-- Screen Share -->
              <button 
                id="screenShareBtn"
                class="p-3 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-full transition-all shadow-lg hover:scale-110"
                title="Partager l'√©cran"
              >
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
              </button>

              <!-- S√©parateur -->
              <div class="w-px h-8 bg-gray-300"></div>

              <!-- Raccrocher -->
              <button 
                id="endCallBtn"
                class="p-3 bg-red-500 hover:bg-red-600 text-white rounded-full transition-all shadow-lg hover:scale-110"
                title="Terminer l'appel"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                </svg>
              </button>
            </div>
          </div>

          <!-- Indicateurs de statut (en haut √† gauche) -->
          <div id="mediaStatus" class="hidden absolute top-4 left-4 flex items-center space-x-2">
            <div id="audioIndicator" class="flex items-center space-x-1 px-3 py-1.5 bg-green-500/90 backdrop-blur-sm rounded-lg">
              <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd" />
              </svg>
              <span class="text-white text-xs font-medium">Micro</span>
            </div>
            <div id="videoIndicator" class="flex items-center space-x-1 px-3 py-1.5 bg-green-500/90 backdrop-blur-sm rounded-lg">
              <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z" />
              </svg>
              <span class="text-white text-xs font-medium">Cam√©ra</span>
            </div>
          </div>
        </div>
      </div>
    </main>

    <!-- ========== PANNEAU CHAT (DROIT) ========== -->
    <aside class="w-96 bg-white border-l border-gray-200 flex flex-col shadow-lg">
      <!-- Header Chat -->
      <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
        <h2 class="text-lg font-bold text-gray-900 flex items-center">
          <svg class="w-5 h-5 mr-2 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
          Messages de consultation
        </h2>
        <p class="text-xs text-gray-500 mt-1">√âchangez avec votre interlocuteur en temps r√©el</p>
      </div>

      <!-- Messages -->
      <div id="chatMessages" class="flex-1 p-6 space-y-4 overflow-y-auto bg-gray-50">
        <div class="text-center text-gray-400 py-16">
          <svg class="w-16 h-16 mx-auto text-gray-300 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
          <p class="text-sm font-medium text-gray-500">Aucun message pour l'instant</p>
          <p class="text-xs text-gray-400 mt-1">Les messages appara√Ætront ici</p>
        </div>
      </div>

      <!-- Input chat -->
      <div class="p-4 border-t border-gray-200 bg-white">
        <form id="chatForm" class="space-y-3">
          <div class="flex space-x-2">
            <input 
              type="text" 
              id="chatInput" 
              placeholder="√âcrivez votre message..." 
              class="flex-1 px-4 py-3 bg-gray-50 text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all"
            />
            <button 
              type="submit" 
              class="px-5 py-3 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-all shadow-sm hover:shadow font-medium"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
              </svg>
            </button>
          </div>
          <p class="text-xs text-gray-500">
            üí° <strong>Astuce :</strong> Utilisez <code class="px-1.5 py-0.5 bg-gray-200 rounded text-xs">**gras**</code>, <code class="px-1.5 py-0.5 bg-gray-200 rounded text-xs">*italique*</code> pour formater vos messages
          </p>
        </form>
      </div>
    </aside>
  </div>

  <!-- Barre de statut (en bas de la vid√©o) -->
  <div id="statusBar" class="hidden absolute bottom-20 left-1/2 transform -translate-x-1/2 bg-primary-600/95 backdrop-blur-sm px-5 py-2.5 rounded-full shadow-xl z-20">
    <p class="text-white text-sm font-medium" id="statusMessage">Pr√™t √† d√©marrer</p>
  </div>
</div>

<script>
  // Attendre que le DOM et app.js soient charg√©s
  document.addEventListener('DOMContentLoaded', function() {
    // V√©rifier que VideoConsultation est disponible
    if (typeof window.VideoConsultation === 'undefined') {
      console.error('VideoConsultation non charg√© !');
      alert('Erreur : Module vid√©o non charg√©. Rechargez la page.');
      return;
    }

    // Variables globales
    const VideoConsultation = window.VideoConsultation;
    let consultation = null;
    const remoteStreams = new Map();

    // √âl√©ments DOM
    const joinButton = document.getElementById('joinButton');
    const leaveButton = document.getElementById('leaveButton');
    const setupControls = document.getElementById('setupControls');
    const callInterface = document.getElementById('callInterface');
    const userNameInput = document.getElementById('userNameInput');
    const roomIdInput = document.getElementById('roomIdInput');
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    const localPlaceholder = document.getElementById('localVideo-placeholder');
    const remotePlaceholder = document.getElementById('remoteVideo-placeholder');
    const toggleAudioBtn = document.getElementById('toggleAudioBtn');
    const toggleVideoBtn = document.getElementById('toggleVideoBtn');
    const screenShareBtn = document.getElementById('screenShareBtn');
    const endCallBtn = document.getElementById('endCallBtn');
    const chatForm = document.getElementById('chatForm');
    const chatInput = document.getElementById('chatInput');
    const chatMessages = document.getElementById('chatMessages');
    const statusMessage = document.getElementById('statusMessage');
    const statusBar = document.getElementById('statusBar');
    const currentUserName = document.getElementById('currentUserName');
    const userInitial = document.getElementById('userInitial');
    const localUserInitial = document.getElementById('localUserInitial');
    const roomIdDisplay = document.getElementById('roomIdDisplay');
    const connectionStatus = document.getElementById('connectionStatus');
    const mediaStatus = document.getElementById('mediaStatus');
    const audioIndicator = document.getElementById('audioIndicator');
    const videoIndicator = document.getElementById('videoIndicator');
    const remoteUserOverlay = document.getElementById('remoteUserOverlay');
    const remoteUserName = document.getElementById('remoteUserName');

    // Debug : V√©rifier si VideoConsultation est charg√©
    console.log('üîç VideoConsultation disponible:', typeof VideoConsultation);
    console.log('üîç window.VideoConsultation:', typeof window.VideoConsultation);
    
    if (!VideoConsultation) {
      console.error('‚ùå VideoConsultation non charg√© !');
      alert('‚ùå Erreur : Module vid√©o non charg√©. Rechargez la page.');
      return;
    }

    // V√©rifier le support WebRTC
    const support = VideoConsultation.checkWebRTCSupport();
    console.log('üîç Support WebRTC:', support);
    if (!support.supported) {
      alert('‚ö†Ô∏è Votre navigateur ne supporte pas WebRTC. Utilisez Chrome, Firefox ou Edge r√©cent.');
    }

    // ===== REJOINDRE LA CONSULTATION =====
    joinButton.onclick = async () => {
      console.log('üéØ Clic sur bouton Rejoindre');
      
      const name = userNameInput.value.trim();
      const roomId = roomIdInput.value.trim() || `consult-${Date.now()}`;
      
      console.log('üìù Nom:', name, 'Salle:', roomId);

      if (!name) {
        alert('‚ö†Ô∏è Veuillez entrer votre nom');
        userNameInput.focus();
        return;
      }

      try {
        joinButton.disabled = true;
        joinButton.innerHTML = '<svg class="w-5 h-5 inline animate-spin mr-2" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Connexion...';

        // Cr√©er l'instance de consultation
        consultation = new VideoConsultation(roomId, name);

        // Configurer les callbacks
        setupConsultationCallbacks();

        // Connecter au serveur
        await consultation.connect();

        // D√©marrer le stream local
        const stream = await consultation.startLocalStream();
        localVideo.srcObject = stream;
        localPlaceholder.style.display = 'none';

        // Mettre √† jour l'UI
        setupControls.classList.add('hidden');
        callInterface.classList.remove('hidden');
        leaveButton.classList.remove('hidden');
        connectionStatus.classList.remove('hidden');
        mediaStatus.classList.remove('hidden');
        currentUserName.textContent = name;
        userInitial.textContent = name.charAt(0).toUpperCase();
        localUserInitial.textContent = name.charAt(0).toUpperCase();
        roomIdDisplay.textContent = roomId;

        showStatus('‚úÖ Connect√© - En attente du participant');

      } catch (error) {
        console.error('Erreur:', error);
        
        // Message d'erreur personnalis√© selon le type
        let errorMessage = '';
        if (error.name === 'NotAllowedError' || error.message.includes('Permission denied')) {
          errorMessage = `
            <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
              <div class="bg-white rounded-2xl p-6 max-w-md shadow-2xl">
                <div class="text-center mb-4">
                  <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-3">
                    <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                  </div>
                  <h3 class="text-xl font-bold text-gray-900 mb-2">üì∑ Acc√®s cam√©ra/micro refus√©</h3>
                  <p class="text-gray-600 text-sm mb-4">Vous devez autoriser l'acc√®s √† votre cam√©ra et microphone pour utiliser la consultation vid√©o.</p>
                </div>
                
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                  <p class="text-sm text-blue-900 font-semibold mb-2">üîß Comment autoriser :</p>
                  <ul class="text-xs text-blue-800 space-y-1 list-disc list-inside">
                    <li><strong>Chrome/Edge :</strong> Cliquez sur l'ic√¥ne üîí ou üé• dans la barre d'adresse ‚Üí Autoriser</li>
                    <li><strong>Safari iOS :</strong> R√©glages ‚Üí Safari ‚Üí Cam√©ra/Micro ‚Üí Autoriser</li>
                    <li><strong>Chrome Android :</strong> Appuyez sur "Autoriser" quand demand√©</li>
                  </ul>
                </div>
                
                <button onclick="this.closest('.fixed').remove()" class="w-full px-4 py-3 bg-primary-600 text-white rounded-lg font-semibold hover:bg-primary-700 transition-colors">
                  OK, compris
                </button>
              </div>
            </div>
          `;
          document.body.insertAdjacentHTML('beforeend', errorMessage);
        } else {
          alert(`‚ùå Erreur : ${error.message}`);
        }
        
        joinButton.disabled = false;
        joinButton.innerHTML = '<svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5" /></svg> <span>Rejoindre la consultation</span>';
      }
    };

    // ===== CALLBACKS =====
    function setupConsultationCallbacks() {
      consultation.onRemoteStream = (stream, userId) => {
        console.log('‚úÖ Stream distant re√ßu:', userId);
        remoteStreams.set(userId, stream);
        remoteVideo.srcObject = stream;
        remotePlaceholder.style.display = 'none';
        remoteUserOverlay.classList.remove('hidden');
        showStatus('üé• Consultation en cours');
      };

      consultation.onUserJoined = (payload) => {
        console.log('üë• Utilisateur rejoint:', payload);
        // D√©clencher la cr√©ation de la connexion peer
        if (payload.user_id !== consultation.userId) {
          console.log('üîÑ Cr√©ation connexion peer pour:', payload.user_id);
          consultation.createPeerConnection(payload.user_id);
        }
      };

      consultation.onRemoteStreamRemoved = (userId) => {
        console.log('‚ö†Ô∏è Stream distant supprim√©:', userId);
        remoteStreams.delete(userId);
        if (remoteStreams.size === 0) {
          remoteVideo.srcObject = null;
          remotePlaceholder.style.display = 'flex';
          remoteUserOverlay.classList.add('hidden');
          showStatus('‚è≥ Participant d√©connect√©');
        }
      };

      consultation.onChatMessage = (data) => {
        addChatMessage(data.from_name, data.message, data.timestamp, false);
      };

      consultation.onUserJoined = (data) => {
        showStatus(`üëã ${data.user_name} a rejoint la consultation`);
        remoteUserName.textContent = data.user_name;
      };

      consultation.onUserLeft = (data) => {
        showStatus(`üëã ${data.user_name} a quitt√© la consultation`);
      };

      consultation.onStatusChange = (message) => {
        showStatus(message);
      };

      consultation.onError = (context, error) => {
        showStatus(`‚ùå ${context}: ${error.message}`);
      };
    }

    // ===== CONTR√îLES =====
    toggleAudioBtn.onclick = () => {
      if (!consultation) return;
      const enabled = consultation.toggleAudio();
      
      if (enabled) {
        toggleAudioBtn.classList.remove('bg-red-500', 'hover:bg-red-600');
        toggleAudioBtn.classList.add('bg-primary-600', 'hover:bg-primary-700');
        audioIndicator.classList.remove('bg-red-500/90');
        audioIndicator.classList.add('bg-green-500/90');
      } else {
        toggleAudioBtn.classList.remove('bg-primary-600', 'hover:bg-primary-700');
        toggleAudioBtn.classList.add('bg-red-500', 'hover:bg-red-600');
        audioIndicator.classList.remove('bg-green-500/90');
        audioIndicator.classList.add('bg-red-500/90');
      }
    };

    toggleVideoBtn.onclick = () => {
      if (!consultation) return;
      const enabled = consultation.toggleVideo();
      
      if (enabled) {
        toggleVideoBtn.classList.remove('bg-red-500', 'hover:bg-red-600');
        toggleVideoBtn.classList.add('bg-primary-600', 'hover:bg-primary-700');
        videoIndicator.classList.remove('bg-red-500/90');
        videoIndicator.classList.add('bg-green-500/90');
        localPlaceholder.style.display = 'none';
      } else {
        toggleVideoBtn.classList.remove('bg-primary-600', 'hover:bg-primary-700');
        toggleVideoBtn.classList.add('bg-red-500', 'hover:bg-red-600');
        videoIndicator.classList.remove('bg-green-500/90');
        videoIndicator.classList.add('bg-red-500/90');
        localPlaceholder.style.display = 'flex';
      }
    };

    screenShareBtn.onclick = async () => {
      if (!consultation) return;
      
      if (consultation.isScreenSharing) {
        consultation.stopScreenShare();
        screenShareBtn.classList.remove('bg-yellow-500', 'hover:bg-yellow-600', 'text-white');
        screenShareBtn.classList.add('bg-gray-200', 'hover:bg-gray-300', 'text-gray-700');
      } else {
        try {
          await consultation.startScreenShare();
          screenShareBtn.classList.remove('bg-gray-200', 'hover:bg-gray-300', 'text-gray-700');
          screenShareBtn.classList.add('bg-yellow-500', 'hover:bg-yellow-600', 'text-white');
          showStatus('üì∫ Partage d\'√©cran actif');
        } catch (error) {
          console.error('Erreur partage √©cran:', error);
          showStatus('‚ùå Erreur : Partage d\'√©cran non disponible');
        }
      }
    };

    endCallBtn.onclick = () => {
      if (confirm('Voulez-vous vraiment terminer la consultation ?')) {
        if (consultation) {
          consultation.disconnect();
          resetUI();
        }
      }
    };

    leaveButton.onclick = () => {
      if (confirm('Voulez-vous vraiment quitter la consultation ?')) {
        if (consultation) {
          consultation.disconnect();
          resetUI();
        }
      }
    };

    // ===== CHAT =====
    chatForm.onsubmit = (e) => {
      e.preventDefault();
      const message = chatInput.value.trim();
      if (message && consultation) {
        consultation.sendChatMessage(message);
        addChatMessage(currentUserName.textContent, message, new Date().toISOString(), true);
        chatInput.value = '';
      }
    };

    // ===== UTILITAIRES =====
    function showStatus(message) {
      statusMessage.textContent = message;
      statusBar.classList.remove('hidden');
      
      setTimeout(() => {
        statusBar.classList.add('hidden');
      }, 4000);
    }

    function addChatMessage(from, message, timestamp, isOwn) {
      // Parser markdown simple
      const formattedMessage = parseMarkdown(message);
      
      const msgDiv = document.createElement('div');
      msgDiv.className = `flex ${isOwn ? 'justify-end' : 'justify-start'}`;
      
      const initial = from.charAt(0).toUpperCase();
      const avatarColor = isOwn ? 'bg-primary-600' : 'bg-gray-600';
      
      msgDiv.innerHTML = `
        <div class="flex items-end space-x-2 max-w-sm ${isOwn ? 'flex-row-reverse space-x-reverse' : ''}">
          <!-- Avatar -->
          <div class="${avatarColor} w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold flex-shrink-0">
            ${initial}
          </div>
          
          <!-- Bulle -->
          <div class="${isOwn ? 'bg-primary-600' : 'bg-white border border-gray-200'} rounded-2xl px-4 py-3 shadow-sm">
            <div class="flex items-center space-x-2 mb-1">
              <span class="text-xs font-semibold ${isOwn ? 'text-primary-100' : 'text-gray-700'}">${from}</span>
              <span class="text-xs ${isOwn ? 'text-primary-200' : 'text-gray-400'}">${formatTime(timestamp)}</span>
            </div>
            <div class="${isOwn ? 'text-white' : 'text-gray-900'} text-sm leading-relaxed message-content">
              ${formattedMessage}
            </div>
          </div>
        </div>
      `;
      
      // Retirer le placeholder
      const placeholder = chatMessages.querySelector('.text-center');
      if (placeholder) {
        placeholder.remove();
      }
      
      chatMessages.appendChild(msgDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function parseMarkdown(text) {
      if (!text) return '';
      return text
        .replace(/\*\*(.+?)\*\*/g, '<strong class="font-bold">$1</strong>')
        .replace(/\*(.+?)\*/g, '<em class="italic">$1</em>')
        .replace(/`(.+?)`/g, '<code class="bg-gray-800/10 px-1.5 py-0.5 rounded text-xs font-mono">$1</code>')
        .replace(/\n/g, '<br>');
    }

    function formatTime(timestamp) {
      return new Date(timestamp).toLocaleTimeString('fr-FR', {
        hour: '2-digit',
        minute: '2-digit'
      });
    }

    function resetUI() {
      setupControls.classList.remove('hidden');
      callInterface.classList.add('hidden');
      leaveButton.classList.add('hidden');
      connectionStatus.classList.add('hidden');
      mediaStatus.classList.add('hidden');
      localVideo.srcObject = null;
      remoteVideo.srcObject = null;
      localPlaceholder.style.display = 'flex';
      remotePlaceholder.style.display = 'flex';
      remoteUserOverlay.classList.add('hidden');
      currentUserName.textContent = 'Participant';
      userInitial.textContent = '?';
      localUserInitial.textContent = '?';
      roomIdDisplay.textContent = 'En attente...';
      joinButton.disabled = false;
      joinButton.innerHTML = '<svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5" /></svg> <span>Rejoindre la consultation</span>';
      chatMessages.innerHTML = '<div class="text-center text-gray-400 py-16"><svg class="w-16 h-16 mx-auto text-gray-300 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" /></svg><p class="text-sm font-medium text-gray-500">Aucun message pour l\'instant</p></div>';
      consultation = null;
    }

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (consultation) {
        consultation.disconnect();
      }
    });

  }); // Fin DOMContentLoaded
</script>
