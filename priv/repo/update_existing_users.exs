# Script pour mettre Ã  jour les utilisateurs existants avec des noms
# ExÃ©cuter avec: mix run priv/repo/update_existing_users.exs

alias Telemed.Repo
alias Telemed.Accounts.User

IO.puts("\nğŸ”„ Mise Ã  jour des utilisateurs existants...\n")

# Mettre Ã  jour tous les users qui n'ont pas de first_name
users = Repo.all(User)

Enum.each(users, fn user ->
  if is_nil(user.first_name) do
    {first_name, last_name, speciality} = case user.email do
      "patient@example.com" -> {"Sophie", "Laurent", nil}
      "doctor@example.com" -> {"Martin", "Dupont", "MÃ©decine GÃ©nÃ©rale"}
      "dr.martin@example.com" -> {"Claire", "Martin", "Cardiologie"}
      "admin@example.com" -> {"Admin", "SystÃ¨me", nil}
      "marie.dupont@example.com" -> {"Marie", "Dupont", nil}
      _ ->
        # Pour les autres, extraire du email
        email_parts = String.split(user.email, "@") |> List.first() |> String.split(".")
        first = email_parts |> List.first() |> String.capitalize()
        last = if length(email_parts) > 1, do: email_parts |> List.last() |> String.capitalize(), else: "User"
        {first, last, nil}
    end

    user
    |> Ecto.Changeset.change(%{
      first_name: first_name,
      last_name: last_name,
      speciality: speciality
    })
    |> Repo.update!()

    IO.puts("âœ… Mis Ã  jour: #{first_name} #{last_name} (#{user.email})")
  end
end)

IO.puts("\nâœ¨ Mise Ã  jour terminÃ©e!\n")
